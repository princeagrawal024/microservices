package com.demo.moviecatalogservice.resources;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.reactive.function.client.WebClient;

import com.demo.moviecatalogservice.model.CatalogItem;
import com.demo.moviecatalogservice.model.Movie;
import com.demo.moviecatalogservice.model.Rating;

@RestController
@RequestMapping("/catalog")
public class MovieCatalogResource {
	
	 @Autowired
	 RestTemplate restTemplate;
	 
	 @RequestMapping("/{userID}")
	 public List<CatalogItem> getCatalog(@PathVariable("userID") String userID){
		 
		 //RestTemplate restTemplate = new RestTemplate(); //creating multiple instances
		 
		 
		 
		 //get all the rated movie IDs from rating-data-service (3)
		 List<Rating> ratings = Arrays.asList(
				 new Rating("1234", 4),
				new Rating("5678", 4)
				 );
		  
		 
		   //Java 8 approach
		   //return ratings.stream().map(rating -> new CatalogItem("name", "desc", rating.getRating())).collect(Collectors.toList());
		  
		 List<CatalogItem>  catalogList = new ArrayList<CatalogItem>();
		 for(Rating rating: ratings) {
			 
			 
			 //using web Client for Demo
			 //Movie movie_using_webClient = usingWebClient(rating);
			 
			 
			 //get details for each movie
			 //Movie movie = restTemplate.getForObject("http://localhost:8082/movies/"+rating.getMovieId(), Movie.class);
			 catalogList.add(new CatalogItem(movie_using_webClient.getName(), "description", rating.getRating()));
			}
		 return catalogList;
		 
		 
		 
		 
		 //For each movie ID, call movie info service and get details.
		 
		 
		 
		 
		 
		 //Put all them together
		 
		 
	 }
	 
	 
	 
	 //use Web client
	 //Asynchronous Programming
	 public Movie usingWebClient(Rating rating) {
		 System.out.println("Weblicnet code called");
		 WebClient.Builder webClientBuilder =  WebClient.builder();
		 
		 Movie movie = 
				 webClientBuilder.build() //builder pattern
				 .get()   				  //GET
				 .uri("http://localhost:8082/movies/"+rating.getMovieId())
				 .retrieve()  //fetch
				 .bodyToMono(Movie.class) //Convert response to Movie //Mono is reactive or Asynchronous programming
				 .block(); //to make synchronous
		 
		 return movie;
	 }
	 
	 

}
